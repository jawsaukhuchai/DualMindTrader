import logging
from typing import Dict, Any
from .position_manager import PositionManager   # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô order
from mind2_python.safe_print import safe_print

logger = logging.getLogger("LotSizer")


# ------------------------------------------------------------------
# LotSizer (base)
# ------------------------------------------------------------------
class LotSizer:
    def __init__(self, balance: float = 10000.0):
        """
        LotSizer ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î lot ‡∏ï‡∏≤‡∏° balance + risk config
        """
        self.balance = balance

    def compute(self, entry: Any, sym_cfg: Dict[str, Any]) -> float:
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot ‡∏ï‡∏≤‡∏° risk percent ‡πÅ‡∏•‡∏∞ clamp ‡∏î‡πâ‡∏ß‡∏¢ min/max lot
        ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö üåç Global Reversal ‚Üí Dynamic Lot Scaling
        """
        try:
            risk_cfg = sym_cfg.get("risk", {})
            risk_percent = risk_cfg.get("risk_percent", 1.0)
            min_lot = risk_cfg.get("min_lot", 0.01)
            max_lot = risk_cfg.get("max_lot", 0.5)

            # --- Base lot ---
            raw_lot = (self.balance * risk_percent) / 100000.0

            # --- Clamp ---
            lot = max(min_lot, raw_lot)
            lot = min(max_lot, lot)

            # --- üåç Global Reversal Scaling ---
            global_reversal = getattr(entry, "global_reversal", False) or sym_cfg.get("global_reversal", False)
            if global_reversal:
                open_count = PositionManager.count_open_positions(entry.symbol)
                # decay factor: ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ order ‡∏°‡∏≤‡∏Å lot ‡∏¢‡∏¥‡πà‡∏á‡∏•‡∏î
                decay_factor = max(0.3, 1.0 - (open_count * 0.2))
                scaled_lot = lot * decay_factor
                msg = (f"[LotSizer] {entry.symbol} üåç GlobalReversal scaling "
                       f"orders={open_count}, base_lot={lot:.2f} ‚Üí scaled={scaled_lot:.2f}")
                logger.warning(msg)
                safe_print(msg, log_level="debug")
                lot = scaled_lot

            return round(lot, 2)  # ‚úÖ ‡∏õ‡∏±‡∏î‡∏™‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°

        except Exception as e:
            logger.exception(f"LotSizer.compute error: {e}")
            return 0.0


# ------------------------------------------------------------------
# AdaptiveLotSizer (extends LotSizer)
# ------------------------------------------------------------------
class AdaptiveLotSizer(LotSizer):
    def compute(self, entry: Any, sym_cfg: Dict[str, Any], regime: str = "normal") -> float:
        """
        Adaptive lot sizing: ‡πÉ‡∏ä‡πâ base ‡∏à‡∏≤‡∏Å LotSizer ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility regime
        """
        base_lot = super().compute(entry, sym_cfg)
        try:
            factor = 1.0
            if regime == "high_vol":
                factor = 0.7    # ‡∏•‡∏î lot ‡∏ñ‡πâ‡∏≤ volatility ‡∏™‡∏π‡∏á
            elif regime == "low_vol":
                factor = 1.3    # ‡πÄ‡∏û‡∏¥‡πà‡∏° lot ‡∏ñ‡πâ‡∏≤ volatility ‡∏ï‡πà‡∏≥
            elif regime == "trend":
                factor = 1.1    # boost ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏ô trend
            # "range" ‡∏´‡∏£‡∏∑‡∏≠ "normal" ‚Üí factor=1.0

            lot = base_lot * factor

            min_lot = sym_cfg.get("risk", {}).get("min_lot", 0.01)
            max_lot = sym_cfg.get("risk", {}).get("max_lot", 0.5)

            # ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ high_vol: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ min_lot ‡πÑ‡∏î‡πâ (‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á min_lot)
            if regime == "high_vol":
                lot = max(min_lot * 0.5, lot)
            else:
                lot = max(min_lot, lot)

            # clamp max
            lot = min(max_lot, lot)

            msg = f"[AdaptiveLotSizer] {entry.symbol} regime={regime} base={base_lot:.2f} ‚Üí lot={lot:.2f}"
            logger.debug(msg)
            safe_print(msg, log_level="debug")

            return round(lot, 2)

        except Exception as e:
            logger.exception(f"AdaptiveLotSizer.compute error: {e}")
            return base_lot
